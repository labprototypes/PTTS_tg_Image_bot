import os
import logging
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI
from dotenv import load_dotenv
import pdfplumber
import docx
from fpdf import FPDF
import cairosvg

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# –õ–æ–≥–æ—Ç–∏–ø –∏ —à—Ä–∏—Ñ—Ç
LOGO_PATH = "long logo h100.svg"
FONT_PATH = "TT Travels Next Trial Bold.ttf"

logging.basicConfig(level=logging.INFO)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n"
        "- –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞—á–Ω–∏ —Å '–ö–∞—Ä—Ç–∏–Ω–∫–∞: ...')\n"
        "- –ü—Ä–∏–Ω—è—Ç—å –±—Ä–∏—Ñ —á–µ—Ä–µ–∑ /brief –∏ –≤—ã–¥–∞—Ç—å 5 –∏–¥–µ–π –≤ PDF"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text.lower().startswith("–∫–∞—Ä—Ç–∏–Ω–∫–∞:"):
        prompt = text.split("–∫–∞—Ä—Ç–∏–Ω–∫–∞:", 1)[1].strip()
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        image = client.images.generate(prompt=prompt, n=1, size="1024x1024")
        image_url = image.data[0].url
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=image_url)
    else:
        await update.message.reply_chat_action(action="typing")
        chat_completion = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": text}]
        )
        await update.message.reply_text(chat_completion.choices[0].message.content)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /brief
async def brief_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±—Ä–∏—Ñ–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /brief.")
        return

    await update.message.reply_text("üì® –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    file = await context.bot.get_file(update.message.document.file_id)
    file_path = f"brief.{file.file_path.split('.')[-1]}"
    await file.download_to_drive(file_path)

    await update.message.reply_text("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –±—Ä–∏—Ñ–∞...")
    text = extract_text(file_path)
    if not text:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.")
        return

    await update.message.reply_text("üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –±—Ä–∏—Ñ –≤ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π...")
    gpt_response = await generate_ideas(text)

    await update.message.reply_text("üìÑ –°–æ–±–∏—Ä–∞—é PDF —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º...")
    pdf_path = "ideas_output.pdf"
    try:
        generate_pdf(gpt_response, pdf_path)
        await update.message.reply_document(InputFile(pdf_path))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:\n{str(e)}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π —á–µ—Ä–µ–∑ GPT
async def generate_ideas(text):
    prompt = (
        f"–¢—ã –∫—Ä–µ–∞—Ç–∏–≤—â–∏–∫. –ü—Ä–∏–¥—É–º–∞–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –±—Ä–∏—Ñ—É. "
        f"–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π –∏–¥–µ–∏:\n\n"
        f"1) –ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"2) –í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å\n"
        f"3) –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"4) –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"5) –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–∏\n"
        f"   5.1) –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π\n"
        f"   5.2) –ï—Å–ª–∏ —ç—Ç–æ 360-–∫–∞–º–ø–∞–Ω–∏—è ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å–∫–ª–∞–¥–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
        f"   5.3) –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–∏–¥–¥–∏–Ω–≥ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ö–∞–Ω–∏–∫—É\n"
        f"   5.4) –ï—Å–ª–∏ —ç—Ç–æ –∏–≤–µ–Ω—Ç ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é\n\n"
        f"–ë—Ä–∏—Ñ:\n{text}"
    )
    completion = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return completion.choices[0].message.content

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def extract_text(path):
    ext = path.split(".")[-1].lower()
    try:
        if ext == "pdf":
            with pdfplumber.open(path) as pdf:
                return "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])
        elif ext in ["docx", "doc"]:
            doc = docx.Document(path)
            return "\n".join([para.text for para in doc.paragraphs])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:", e)
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
def generate_pdf(text, output_path):
    pdf = FPDF()
    pdf.add_page()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
    logo_temp = "logo_temp.png"
    cairosvg.svg2png(url=LOGO_PATH, write_to=logo_temp, output_width=200)
    pdf.image(logo_temp, x=10, y=10, w=40)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    pdf.add_font("CustomFont", "", FONT_PATH, uni=True)
    pdf.set_font("CustomFont", size=12)
    pdf.ln(50)  # –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ª–æ–≥–æ—Ç–∏–ø–∞
    pdf.multi_cell(0, 10, txt=text, align="L")
    pdf.output(output_path)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("brief", brief_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.add_handler(MessageHandler(filters.Document.ALL, brief_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

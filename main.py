import logging
import os
import tempfile
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from docx import Document
import pdfplumber
from openai import OpenAI
from PIL import Image, ImageDraw, ImageFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –®—Ä–∏—Ñ—Ç
FONT_PATH = "TT Travels Next Trial Bold.ttf"
FONT_SIZE = 72

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = [
    "–í–∏–¥–µ–æ—Ä–æ–ª–∏–∫",
    "360-–∫–∞–º–ø–∞–Ω–∏—è",
    "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–∏–¥–¥–∏–Ω–≥",
    "–ò–≤–µ–Ω—Ç",
    "–î—Ä—É–≥–æ–µ"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_context = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å .docx –∏–ª–∏ .pdf —Ñ–∞–π–ª —Å –±—Ä–∏—Ñ–æ–º.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.document
    file_name = file.file_name.lower()

    with tempfile.NamedTemporaryFile(delete=False) as tf:
        new_file = await context.bot.get_file(file.file_id)
        await new_file.download_to_drive(custom_path=tf.name)

        if file_name.endswith(".docx"):
            text = extract_text_from_docx(tf.name)
        elif file_name.endswith(".pdf"):
            text = extract_text_from_pdf(tf.name)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .docx –∏–ª–∏ .pdf —Ñ–∞–π–ª.")
            return

    user_id = update.effective_user.id
    user_context[user_id] = {"brief": text}

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = [
        [InlineKeyboardButton(cat, callback_data=cat)] for cat in CATEGORIES
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    category = query.data
    brief = user_context.get(user_id, {}).get("brief", "")

    if not brief:
        await query.edit_message_text("–ë—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.")
        return

    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")

    ideas = await generate_ideas(brief, category)
    await query.edit_message_text(f"–í–æ—Ç –∏–¥–µ–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}*:\n\n{ideas}", parse_mode="Markdown")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π —á–µ—Ä–µ–∑ GPT
async def generate_ideas(text, category):
    prompt = (
        f"–¢—ã –∫—Ä–µ–∞—Ç–∏–≤—â–∏–∫. –ü—Ä–∏–¥—É–º–∞–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –±—Ä–∏—Ñ—É. "
        f"–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π –∏–¥–µ–∏:\n\n"
        f"1) –ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"2) –í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å\n"
        f"3) –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"4) –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"5) –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–∏\n"
        f"   5.1) –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π\n"
        f"   5.2) –ï—Å–ª–∏ —ç—Ç–æ 360-–∫–∞–º–ø–∞–Ω–∏—è ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å–∫–ª–∞–¥–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
        f"   5.3) –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–∏–¥–¥–∏–Ω–≥ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ö–∞–Ω–∏–∫—É\n"
        f"   5.4) –ï—Å–ª–∏ —ç—Ç–æ –∏–≤–µ–Ω—Ç ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        f"–ë—Ä–∏—Ñ:\n{text}"
    )
    completion = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return completion.choices[0].message.content

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    if user_id in user_context:
        user_context[user_id]["last_input"] = text

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ."},
            {"role": "user", "content": text}
        ]
    )
    await update.message.reply_text(response.choices[0].message.content)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def extract_text_from_docx(path):
    doc = Document(path)
    return "\n".join([p.text for p in doc.paragraphs if p.text.strip()])

def extract_text_from_pdf(path):
    text = ""
    with pdfplumber.open(path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""
    return text

# üî• –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio

    async def main():
        TOKEN = os.environ["BOT_TOKEN"]
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        app.add_handler(CallbackQueryHandler(handle_category_selection))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        await app.run_polling()

    asyncio.run(main())

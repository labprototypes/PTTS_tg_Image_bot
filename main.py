import os
import sys
import openai
import fitz
import atexit
import re
from io import BytesIO
from docx import Document
from textwrap import wrap
from telegram import Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics

# –§–∞–π–ª-–∑–∞–º–æ–∫, —á—Ç–æ–±—ã –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å
lock_file = "/tmp/bot.lock"
if os.path.exists(lock_file):
    print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
    sys.exit()
with open(lock_file, "w") as f:
    f.write("running")
atexit.register(lambda: os.remove(lock_file))

# API –∫–ª—é—á–∏
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
is_generating_ideas = False
is_active = True
pending_briefs = {}

# –ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def extract_text_from_pdf(file_path):
    doc = fitz.open(file_path)
    return "\n".join([page.get_text() for page in doc])

def extract_text_from_docx(file_path):
    doc = Document(file_path)
    return "\n".join([para.text for para in doc.paragraphs])

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π
async def generate_ideas(brief_text, extra_comment=None):
    prompt = f"–í–æ—Ç –±—Ä–∏—Ñ:\n{brief_text}"
    if extra_comment:
        prompt += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±—Ä–∏—Ñ—É:\n{extra_comment}"
    prompt += "\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –†–û–í–ù–û 5 –∏–¥–µ–π. –§–æ—Ä–º–∞—Ç:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ (–∫—Ä—É–ø–Ω–æ)\n2. –ò–Ω—Ç—Ä–æ (2 –∞–±–∑–∞—Ü–∞)\n3. –ö—Ä–∞—Ç–∫–æ\n4. –ü–æ–¥—Ä–æ–±–Ω–æ (2 –∞–±–∑–∞—Ü–∞)\n5. –°—Ü–µ–Ω–∞—Ä–∏–π (5 –ø—É–Ω–∫—Ç–æ–≤)\n6. –ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è (3 –ø—É–Ω–∫—Ç–∞)"

    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã —Å–∏–ª—å–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä. –ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.85,
        max_tokens=2800
    )
    return response.choices[0].message.content.strip()

# PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
def create_pdf(ideas_text: str) -> BytesIO:
    pdf_output = BytesIO()
    c = canvas.Canvas(pdf_output, pagesize=letter)
    width, height = letter
    x_margin, y = 50, height - 50
    max_width = width - x_margin * 2 - 10

    font_path = "TT_Norms_Pro_Trial_Expanded_Medium.ttf"
    pdfmetrics.registerFont(TTFont("CustomFont", font_path))
    c.setFont("CustomFont", 12)

    heading_size = 16
    subheading_size = 13
    body_size = 11.5
    line_height = 15

    ideas = re.split(r"(?=–ò–¥–µ—è \d+:)", ideas_text.strip())

    for idea in ideas:
        lines = idea.strip().split("\n")
        for line in lines:
            line = line.strip()
            if not line:
                continue

            if re.match(r"^–ò–¥–µ—è \d+:", line):
                c.setFont("CustomFont", heading_size)
                for part in wrap(line, width=int(max_width / (heading_size * 0.55))):
                    c.drawString(x_margin, y, part)
                    y -= line_height
                y -= 10
                continue

            if any(line.startswith(h + ":") for h in ["–ò–Ω—Ç—Ä–æ", "–ö—Ä–∞—Ç–∫–æ", "–ü–æ–¥—Ä–æ–±–Ω–æ", "–°—Ü–µ–Ω–∞—Ä–∏–π", "–ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è"]):
                header, _, rest = line.partition(":")
                c.setFont("CustomFont", subheading_size)
                c.drawString(x_margin, y, f"{header}:")
                y -= line_height
                c.setFont("CustomFont", body_size)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤
                if header in ["–°—Ü–µ–Ω–∞—Ä–∏–π", "–ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è"]:
                    numbered = re.findall(r"\d+\.\s.+", idea)
                    for p in numbered:
                        wrapped = wrap(p, width=int(max_width / (body_size * 0.55)))
                        for wline in wrapped:
                            c.drawString(x_margin + 10, y, wline)
                            y -= line_height
                        y -= 2
                else:
                    for part in wrap(rest.strip(), width=int(max_width / (body_size * 0.55))):
                        c.drawString(x_margin, y, part)
                        y -= line_height
                y -= 10
                continue

            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            for wrapped_line in wrap(line, width=int(max_width / (body_size * 0.55))):
                c.drawString(x_margin, y, wrapped_line)
                y -= line_height
            y -= 4

        y -= 40  # –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∏–¥–µ—è–º–∏
        if y < 100:
            c.showPage()
            c.setFont("CustomFont", 12)
            y = height - 50

    c.save()
    pdf_output.seek(0)
    return pdf_output

# Telegram Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_active
    is_active = True
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –±—Ä–∏—Ñ –≤ PDF –∏–ª–∏ DOCX, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É 5 –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π. –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_active
    is_active = False
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å /start.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas, is_active
    if not is_active or is_generating_ideas:
        return

    document = update.message.document
    user_id = update.message.from_user.id
    file = await document.get_file()
    file_path = f"/tmp/{document.file_name}"
    await file.download_to_drive(file_path)

    if file_path.endswith(".pdf"):
        brief_text = extract_text_from_pdf(file_path)
    elif file_path.endswith(".docx"):
        brief_text = extract_text_from_docx(file_path)
    else:
        await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ DOCX.")
        return

    pending_briefs[user_id] = {
        "brief": brief_text,
        "state": "waiting_for_comment"
    }

    await update.message.reply_text("–ë—Ä–∏—Ñ –ø–æ–ª—É—á–µ–Ω ‚úÖ\n–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? –ù–∞–ø–∏—à–∏ –µ–≥–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å '–Ω–µ—Ç'.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas
    user_id = update.message.from_user.id
    if user_id in pending_briefs:
        entry = pending_briefs.pop(user_id)
        brief = entry["brief"]
        extra_comment = update.message.text.strip() if update.message.text.lower() != "–Ω–µ—Ç" else None

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∏–¥–µ—è–º–∏ üß†üí°")
        is_generating_ideas = True

        ideas = await generate_ideas(brief, extra_comment)
        pdf_file = create_pdf(ideas)

        await update.message.reply_document(InputFile(pdf_file, filename="ideas.pdf"))
        await update.message.reply_text(
            "–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data="accept")],
                [InlineKeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å üí¨", callback_data="comment")]
            ])
        )
        is_generating_ideas = False
    else:
        await update.message.reply_text("–ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üôÇ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –±—Ä–∏—Ñ, —á—Ç–æ–±—ã —è –ø—Ä–∏–¥—É–º–∞–ª –∏–¥–µ–∏.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "accept":
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ò–¥–µ–∏ –ø—Ä–∏–Ω—è—Ç—ã üéâ")
    elif query.data == "comment":
        await query.edit_message_text("–û–∫–µ–π, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ù–∞–ø–∏—à–∏, —Ö–æ—á–µ—à—å –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–¥–µ–∏ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()

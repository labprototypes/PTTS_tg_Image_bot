import os
import sys
import openai
from docx import Document
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from io import BytesIO
import atexit
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics

import fitz  # PyMuPDF

# === –§–∞–π–ª-–∑–∞–º–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ü–µ—Å—Å ===
lock_file = "/tmp/bot.lock"

if os.path.exists(lock_file):
    print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
    sys.exit()
with open(lock_file, "w") as f:
    f.write("running")
atexit.register(lambda: os.remove(lock_file))

# === –ö–ª—é—á–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
is_generating_ideas = False
is_active = True

client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# === –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ===
def extract_text_from_pdf(file_path):
    doc = fitz.open(file_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def extract_text_from_docx(file_path):
    doc = Document(file_path)
    return "\n".join([p.text for p in doc.paragraphs])

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π ===
async def generate_ideas_from_brief(brief_text: str) -> str:
    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã —Å–∏–ª—å–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ."},
            {"role": "user", "content": f"–í–æ—Ç –±—Ä–∏—Ñ:\n{brief_text}\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–≤–Ω–æ 5 –∏–¥–µ–π. –§–æ—Ä–º–∞—Ç:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ (–∫—Ä—É–ø–Ω–æ)\n2. –ò–Ω—Ç—Ä–æ\n3. –ö—Ä–∞—Ç–∫–æ\n4. –ü–æ–¥—Ä–æ–±–Ω–æ\n5. –°—Ü–µ–Ω–∞—Ä–∏–π\n6. –ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è"}
        ],
        temperature=0.8,
        max_tokens=2500
    )
    return response.choices[0].message.content.strip()

# === PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ===
def create_pdf(ideas: str) -> BytesIO:
    pdf_output = BytesIO()
    c = canvas.Canvas(pdf_output, pagesize=letter)
    width, height = letter

    font_path = "TT_Norms_Pro_Trial_Expanded_Medium.ttf"
    pdfmetrics.registerFont(TTFont('CustomFont', font_path))
    c.setFont("CustomFont", 12)

    y = height - 40
    ideas_list = ideas.split("\nIdea")

    for idx, idea in enumerate(ideas_list[1:], start=1):
        c.setFont("CustomFont", 16)
        c.drawString(40, y, "Idea {}: {}".format(idx, idea.split('\n')[0]))
        y -= 20

        c.setFont("CustomFont", 12)
        sections = ['–ò–Ω—Ç—Ä–æ', '–ö—Ä–∞—Ç–∫–æ', '–ü–æ–¥—Ä–æ–±–Ω–æ', '–°—Ü–µ–Ω–∞—Ä–∏–π', '–ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è']

        for section in sections:
            c.setFont("CustomFont", 14)
            c.drawString(40, y, f"{section}:")
            y -= 15

            c.setFont("CustomFont", 12)
            section_text = [line for line in idea.split('\n') if line.startswith(section)]
            if section_text:
                lines = section_text[0].split(":", 1)[1].strip().split(". ")
                for line in lines:
                    text = line.strip()
                    if text:
                        c.drawString(40, y, text)
                        y -= 14

            y -= 10

        y -= 20
        if y < 80:
            c.showPage()
            c.setFont("CustomFont", 12)
            y = height - 40

    c.save()
    pdf_output.seek(0)
    return pdf_output

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas, is_active
    is_active = True
    is_generating_ideas = False
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ñ–¥—É –±—Ä–∏—Ñ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏.")

# === /stop ===
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_active
    is_active = False
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî /start.")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas, is_active
    if not is_active:
        await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî /start.")
        return
    if is_generating_ideas:
        await update.message.reply_text("–£–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±—Ä–∏—Ñ–æ–º.")
        return

    is_generating_ideas = True
    await update.message.reply_text("–ß–∏—Ç–∞—é –±—Ä–∏—Ñ...")

    doc = update.message.document
    file = await doc.get_file()
    path = f"/tmp/{doc.file_name}"
    await file.download_to_drive(path)

    if path.endswith(".pdf"):
        brief_text = extract_text_from_pdf(path)
    elif path.endswith(".docx"):
        brief_text = extract_text_from_docx(path)
    else:
        await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ DOCX.")
        is_generating_ideas = False
        return

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –∏ –ª–æ–≥ ===
    ideas = await generate_ideas_from_brief(brief_text)
    print("\n\n=== –ò–î–ï–ò, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç GPT-4o ===\n")
    print(ideas)
    print("\n=== –ö–û–ù–ï–¶ –ò–î–ï–ô ===\n")

    if not ideas.strip():
        await update.message.reply_text("GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–¥–µ–π üò¢")
        is_generating_ideas = False
        return

    pdf_file = create_pdf(ideas)
    await update.message.reply_document(document=InputFile(pdf_file, filename="ideas.pdf"))
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ. –ú–æ–∂–µ–º —Å–Ω–æ–≤–∞ –æ–±—â–∞—Ç—å—Å—è.")
    is_generating_ideas = False

# === –ß–∞—Ç —Å –±–æ—Ç–æ–º ===
async def chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas, is_active
    if not is_active:
        await update.message.reply_text("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å.")
        return
    if is_generating_ideas:
        await update.message.reply_text("–°–µ–∫—É–Ω–¥—É, –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±—Ä–∏—Ñ...")
        return

    user_message = update.message.text
    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û–±—â–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."},
            {"role": "user", "content": user_message}
        ],
        temperature=0.7,
        max_tokens=800
    )
    reply = response.choices[0].message.content.strip()
    await update.message.reply_text(reply)

# === MAIN ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), chat_mode))
    app.run_polling()

if __name__ == "__main__":
    main()

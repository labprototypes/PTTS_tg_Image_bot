import os
import sys
import openai
from docx import Document
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from io import BytesIO
import atexit
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç pdfmetrics
from textwrap import wrap  # –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª-–∑–∞–º–æ–∫, –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º
lock_file = "/tmp/bot.lock"

if os.path.exists(lock_file):
    print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
    sys.exit()

with open(lock_file, "w") as f:
    f.write("running")

# –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî —É–¥–∞–ª–∏–º –∑–∞–º–æ–∫
atexit.register(lambda: os.remove(lock_file))

# –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

is_generating_ideas = False
is_active = True  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è OpenAI (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
import fitz  # PyMuPDF
def extract_text_from_pdf(file_path):
    doc = fitz.open(file_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX
def extract_text_from_docx(file_path):
    doc = Document(file_path)
    text = "\n".join([para.text for para in doc.paragraphs])
    return text

# GPT-4o –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å 5 –∏–¥–µ—è–º–∏)
async def generate_ideas_from_brief(brief_text: str) -> str:
    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã —Å–∏–ª—å–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ."},
            {"role": "user", "content": f"–í–æ—Ç –±—Ä–∏—Ñ:\n{brief_text}\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–≤–Ω–æ 5 –∏–¥–µ–π. –§–æ—Ä–º–∞—Ç:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ (–∫—Ä—É–ø–Ω–æ)\n2. –ò–Ω—Ç—Ä–æ\n3. –ö—Ä–∞—Ç–∫–æ\n4. –ü–æ–¥—Ä–æ–±–Ω–æ\n5. –°—Ü–µ–Ω–∞—Ä–∏–π\n6. –ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è"}
        ],
        temperature=0.8,
        max_tokens=2500
    )
    return response.choices[0].message.content.strip()

# PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º reportlab (—Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º)
def create_pdf(ideas: str) -> BytesIO:
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è –∑–∞–ø–∏—Å–∏ PDF –≤ –ø–∞–º—è—Ç—å
    pdf_output = BytesIO()

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç canvas –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    c = canvas.Canvas(pdf_output, pagesize=letter)
    width, height = letter

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
    font_path = "TT_Norms_Pro_Trial_Expanded_Medium.ttf"  # –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
    pdfmetrics.registerFont(TTFont('CustomFont', font_path))
    c.setFont("CustomFont", 12)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç

    y_position = height - 40  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞

    for idx, idea in enumerate(ideas.split("\n\n"), start=1):
        # –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–æ–º–µ—Ä –∏–¥–µ–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
        c.setFont("CustomFont", 16)
        c.drawString(40, y_position, f"Idea {idx}")
        y_position -= 20

        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–¥–µ–∏
        c.setFont("CustomFont", 12)
        lines = idea.strip().split("\n")
        for line in lines:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º wrap –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
            wrapped_lines = wrap(line.strip(), width=90)  # –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            for wline in wrapped_lines:
                c.drawString(40, y_position, wline)
                y_position -= 14
                if y_position < 40:  # –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    c.showPage()
                    c.setFont("CustomFont", 12)
                    y_position = height - 40

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –∏–¥–µ—è–º–∏
        y_position -= 20

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ PDF
    c.save()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π PDF
    pdf_output.seek(0)
    return pdf_output

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas, is_active
    if not is_active:
        await update.message.reply_text("–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å /start.")
        return
    if is_generating_ideas:
        await update.message.reply_text("–°–µ–π—á–∞—Å —è –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –±—Ä–∏—Ñ –≤ PDF/DOC ‚Äî –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏.")

# /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_active
    is_active = False
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å /start.")

# –§–∞–π–ª-–±—Ä–∏—Ñ
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas, is_active
    if not is_active:
        await update.message.reply_text("–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å /start.")
        return
    if is_generating_ideas:
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏, —è –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—Ä–∏—Ñ.")
        return

    is_generating_ideas = True
    await update.message.reply_text("–ë—Ä–∏—Ñ –ø–æ–ª—É—á–µ–Ω. –ß–∏—Ç–∞—é –∏ –¥—É–º–∞—é...")

    document = update.message.document
    file = await document.get_file()
    file_path = f"/tmp/{document.file_name}"
    await file.download_to_drive(file_path)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    if file_path.endswith(".pdf"):
        brief_text = extract_text_from_pdf(file_path)
    elif file_path.endswith(".docx"):
        brief_text = extract_text_from_docx(file_path)
    else:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX.")
        is_generating_ideas = False
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT-4o
    ideas = await generate_ideas_from_brief(brief_text)
    pdf_file = create_pdf(ideas)

    await update.message.reply_document(document=InputFile(pdf_file, filename="ideas.pdf"))
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ–º —Å–Ω–æ–≤–∞ –±–æ–ª—Ç–∞—Ç—å üôÇ")

    is_generating_ideas = False

# –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º (–µ—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
async def chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas, is_active
    if not is_active:
        await update.message.reply_text("–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å /start.")
        return
    if is_generating_ideas:
        await update.message.reply_text("–°–µ–∫—É–Ω–¥—É, —è –µ—â–µ –¥—É–º–∞—é –Ω–∞–¥ –∏–¥–µ—è–º–∏. –°–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å!")
        return

    user_message = update.message.text
    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ–±—â–∞–π—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."},
            {"role": "user", "content": user_message}
        ],
        temperature=0.7,
        max_tokens=800
    )
    answer = response.choices[0].message.content.strip()
    await update.message.reply_text(answer)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), chat_mode))

    app.run_polling()

if __name__ == "__main__":
    main()

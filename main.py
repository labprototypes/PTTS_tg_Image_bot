import os
import io
import logging
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from openai import OpenAI
from dotenv import load_dotenv
import docx
import pdfplumber
from fpdf import FPDF
import cairosvg

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n"
        "- –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞—á–Ω–∏ —Å '–ö–∞—Ä—Ç–∏–Ω–∫–∞: ...')\n"
        "- –ü—Ä–∏–Ω—è—Ç—å –±—Ä–∏—Ñ —á–µ—Ä–µ–∑ /brief –∏ –≤—ã–¥–∞—Ç—å 5 –∏–¥–µ–π –≤ PDF"
    )

# === GPT –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text.lower().startswith("–∫–∞—Ä—Ç–∏–Ω–∫–∞:"):
        prompt = text.split("–∫–∞—Ä—Ç–∏–Ω–∫–∞:", 1)[1].strip()
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            response = client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                size="1024x1024",
                quality="standard",
                n=1
            )
            image_url = response.data[0].url
            await update.message.reply_photo(photo=image_url)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{e}")
    else:
        try:
            response = client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": text}]
            )
            await update.message.reply_text(response.choices[0].message.content)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ GPT:\n{e}")

# === /brief ===
async def brief_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìé –ü—Ä–∏—à–ª–∏ .pdf –∏–ª–∏ .docx —Å –±—Ä–∏—Ñ–æ–º ‚Äî —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é 5 –∏–¥–µ–π.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc.file_name.endswith((".pdf", ".docx")):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .pdf –∏ .docx —Ñ–∞–π–ª—ã.")
        return

    await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª‚Ä¶")

    try:
        file = await doc.get_file()
        file_bytes = await file.download_as_bytearray()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:\n{e}")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    await update.message.reply_text("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –±—Ä–∏—Ñ–∞‚Ä¶")
    try:
        if doc.file_name.endswith(".pdf"):
            text = extract_text_from_pdf(file_bytes)
        else:
            text = extract_text_from_docx(file_bytes)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:\n{e}")
        return

    await update.message.reply_text("üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –±—Ä–∏—Ñ –≤ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π‚Ä¶")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GPT
    gpt_prompt = f"""
–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –±—Ä–∏—Ñ–∞ —Å–æ–∑–¥–∞–π 5 –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π. –î–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏:

1. –ù–∞–∑–≤–∞–Ω–∏–µ  
2. –í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å  
3. –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ  
4. –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ  
5. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è

–ü—É–Ω–∫—Ç 5 –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±—Ä–∏—Ñ–∞:
- –µ—Å–ª–∏ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏–π (5.1)
- –µ—Å–ª–∏ 360 –∫–∞–º–ø–∞–Ω–∏—è ‚Äî —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º (5.2)
- –µ—Å–ª–∏ —Å–∏–¥–¥–∏–Ω–≥ ‚Äî –∏–¥–µ–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ (5.3)
- –µ—Å–ª–∏ –∏–≤–µ–Ω—Ç ‚Äî —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (5.4)

–ë–†–ò–§:
{text}
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": gpt_prompt}]
        )
        result = response.choices[0].message.content
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:\n{e}")
        return

    await update.message.reply_text("üìÑ –°–æ–±–∏—Ä–∞—é PDF —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º‚Ä¶")

    try:
        pdf_bytes = generate_pdf_with_logo(result)
        await update.message.reply_document(document=InputFile(pdf_bytes, filename="–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ_–∏–¥–µ–∏.pdf"))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:\n{e}")

# === –ß—Ç–µ–Ω–∏–µ PDF ===
def extract_text_from_pdf(file_bytes):
    with pdfplumber.open(io.BytesIO(file_bytes)) as pdf:
        return "\n".join(page.extract_text() or "" for page in pdf.pages)

# === –ß—Ç–µ–Ω–∏–µ DOCX ===
def extract_text_from_docx(file_bytes):
    f = io.BytesIO(file_bytes)
    doc = docx.Document(f)
    return "\n".join(p.text for p in doc.paragraphs)

# === PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ===
def generate_pdf_with_logo(text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    # –ª–æ–≥–æ—Ç–∏–ø
    logo_path = "/tmp/logo.png"
    convert_svg_logo("long logo h100.svg", logo_path)
    pdf.image(logo_path, x=10, y=10, w=40)
    pdf.set_xy(10, 40)
    pdf.set_font("Arial", size=12)

    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)

    buffer = io.BytesIO()
    pdf.output(buffer)
    buffer.seek(0)
    return buffer

# === SVG ‚Üí PNG –ª–æ–≥–æ—Ç–∏–ø ===
def convert_svg_logo(svg_path, png_path):
    if not os.path.exists(png_path):
        cairosvg.svg2png(url=svg_path, write_to=png_path)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("brief", brief_command))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

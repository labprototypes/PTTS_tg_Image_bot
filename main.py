import os
import io
import logging
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from openai import OpenAI
from dotenv import load_dotenv
import docx
import pdfplumber
from fpdf import FPDF
from PIL import Image
import cairosvg

load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# === Telegram log ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n- –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n- –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (`–ö–∞—Ä—Ç–∏–Ω–∫–∞: ...`)\n- –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—Ä–∏—Ñ —á–µ—Ä–µ–∑ `/–±—Ä–∏—Ñ`")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text.lower().startswith("–∫–∞—Ä—Ç–∏–Ω–∫–∞:"):
        prompt = text.split("–∫–∞—Ä—Ç–∏–Ω–∫–∞:", 1)[1].strip()
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            response = client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                size="1024x1024",
                quality="standard",
                n=1
            )
            image_url = response.data[0].url
            await update.message.reply_photo(photo=image_url)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    else:
        try:
            response = client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": text}]
            )
            await update.message.reply_text(response.choices[0].message.content)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ GPT: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /–±—Ä–∏—Ñ ===
async def bried_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å .pdf –∏–ª–∏ .docx —Ñ–∞–π–ª —Å –±—Ä–∏—Ñ–æ–º.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc.file_name.endswith((".pdf", ".docx")):
        await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .pdf –∏ .docx —Ñ–∞–π–ª—ã.")
        return

    await update.message.reply_text("üìë –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏...")

    file = await doc.get_file()
    file_bytes = await file.download_as_bytearray()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
    if doc.file_name.endswith(".pdf"):
        text = extract_text_from_pdf(file_bytes)
    else:
        text = extract_text_from_docx(file_bytes)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
    gpt_prompt = f"""
–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω –±—Ä–∏—Ñ. –ù–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π. –ö–∞–∂–¥–∞—è –∏–¥–µ—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:

1. –ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏  
2. –í–≤–æ–¥–Ω—É—é —á–∞—Å—Ç—å  
3. –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏  
4. –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏  
5. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–∏

–ü—É–Ω–∫—Ç 5 –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏ –≤ –±—Ä–∏—Ñ–µ:

- –ï—Å–ª–∏ –≤ –±—Ä–∏—Ñ–µ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π (5.1)
- –ï—Å–ª–∏ —ç—Ç–æ 360 –∫–∞–º–ø–∞–Ω–∏—è / –æ–±—â–∞—è –∏–¥–µ—è ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ—é –∏ –µ—ë –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø–æ–¥ –∫–∞–Ω–∞–ª—ã (5.2)
- –ï—Å–ª–∏ —ç—Ç–æ —Å–∏–¥–¥–∏–Ω–≥ / –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã (5.3)
- –ï—Å–ª–∏ —ç—Ç–æ –∏–≤–µ–Ω—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (5.4)

–ë–†–ò–§:
{text}
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": gpt_prompt}]
        )
        result = response.choices[0].message.content
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    pdf_bytes = generate_pdf_with_logo(result)

    await update.message.reply_document(document=InputFile(pdf_bytes, filename="ideas.pdf"))

# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ===
def extract_text_from_pdf(file_bytes):
    with pdfplumber.open(io.BytesIO(file_bytes)) as pdf:
        return "\n".join(page.extract_text() or "" for page in pdf.pages)

def extract_text_from_docx(file_bytes):
    f = io.BytesIO(file_bytes)
    doc = docx.Document(f)
    return "\n".join(p.text for p in doc.paragraphs)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º ===
def generate_pdf_with_logo(text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    # –í—Å—Ç–∞–≤–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    logo_path = "/tmp/logo.png"
    convert_svg_logo("long logo h100.svg", logo_path)
    pdf.image(logo_path, x=10, y=10, w=40)

    pdf.set_xy(10, 40)
    pdf.set_font("Arial", size=12)

    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)

    buffer = io.BytesIO()
    pdf.output(buffer)
    buffer.seek(0)
    return buffer

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ PNG ===
def convert_svg_logo(svg_path, png_path):
    if not os.path.exists(png_path):
        cairosvg.svg2png(url=svg_path, write_to=png_path)

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–±—Ä–∏—Ñ", bried_command))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

import os
import sys
import openai
import fitz  # PyMuPDF
import re
from docx import Document
from telegram import Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from io import BytesIO
import atexit
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from textwrap import wrap

# –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
lock_file = "/tmp/bot.lock"
if os.path.exists(lock_file):
    print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    sys.exit()
with open(lock_file, "w") as f:
    f.write("running")
atexit.register(lambda: os.remove(lock_file))

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

client = openai.AsyncOpenAI(api_key=openai.api_key)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
is_generating_ideas = False
is_active = True

def extract_text_from_pdf(file_path):
    doc = fitz.open(file_path)
    return "\n".join(page.get_text() for page in doc)

def extract_text_from_docx(file_path):
    doc = Document(file_path)
    return "\n".join([para.text for para in doc.paragraphs])

async def generate_ideas_from_brief(brief_text: str, instructions: str = "") -> str:
    prompt = (
        "–¢—ã —Å–∏–ª—å–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä. –ù–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–∏—Ñ–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π.\n"
        "–§–æ—Ä–º–∞—Ç:\n"
        "–ò–¥–µ—è 1: –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "–ò–Ω—Ç—Ä–æ: –º–∏–Ω–∏–º—É–º 2 –∞–±–∑–∞—Ü–∞\n"
        "–ö—Ä–∞—Ç–∫–æ: 1 —Ñ—Ä–∞–∑–∞\n"
        "–ü–æ–¥—Ä–æ–±–Ω–æ: –º–∏–Ω–∏–º—É–º 2 –∞–±–∑–∞—Ü–∞\n"
        "–°—Ü–µ–Ω–∞—Ä–∏–π: –º–∏–Ω–∏–º—É–º 5 –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤\n"
        "–ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è: –º–∏–Ω–∏–º—É–º 3 –ø–æ–¥–ø—É–Ω–∫—Ç–∞\n\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π * –∏ #. –ü–∏—à–∏ —á–∏—Å—Ç–æ –∏ —á–∏—Ç–∞–µ–º–æ.\n\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {instructions}\n\n–ë—Ä–∏—Ñ:\n{brief_text}"
    )
    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.95,
        max_tokens=4000,
    )
    return re.sub(r"[*#]+", "", response.choices[0].message.content.strip())

async def regenerate_ideas(original: str, comments: list[str], rewrite_all: bool) -> str:
    joined_comments = "\n".join(f"- {c}" for c in comments)
    instruction = "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—à–∏ –∏–¥–µ–∏" if rewrite_all else "–£–ª—É—á—à–∏ —Ç–µ–∫—É—â–∏–µ –∏–¥–µ–∏"
    prompt = (
        f"{instruction} —Å —É—á—ë—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∏–∂–µ.\n\n"
        f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏:\n{original}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{joined_comments}\n\n"
        "–§–æ—Ä–º–∞—Ç:\n"
        "–ò–¥–µ—è 1: –ù–∞–∑–≤–∞–Ω–∏–µ\n–ò–Ω—Ç—Ä–æ: 2 –∞–±–∑–∞—Ü–∞\n–ö—Ä–∞—Ç–∫–æ: 1 —Ñ—Ä–∞–∑–∞\n–ü–æ–¥—Ä–æ–±–Ω–æ: 2 –∞–±–∑–∞—Ü–∞\n"
        "–°—Ü–µ–Ω–∞—Ä–∏–π: 5 –ø—É–Ω–∫—Ç–æ–≤\n–ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è: 3 –ø—É–Ω–∫—Ç–∞\n\n–ë–µ–∑ markdown."
    )
    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.95,
        max_tokens=4000,
    )
   
    return re.sub(r"[*#]+", "", response.choices[0].message.content.strip())
def create_pdf(ideas: str) -> BytesIO:
    pdf_output = BytesIO()
    c = canvas.Canvas(pdf_output, pagesize=letter)
    width, height = letter

    # –®—Ä–∏—Ñ—Ç
    font_path = "TT_Norms_Pro_Trial_Expanded_Medium.ttf"
    pdfmetrics.registerFont(TTFont('CustomFont', font_path))

    margin_x = 50
    max_width = width - 2 * margin_x - 20  # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ø—Ä–∞–≤—ã–π –æ—Ç—Å—Ç—É–ø
    y = height - 50

    c.setFont("CustomFont", 12)
    heading_size = 16
    subheading_size = 13
    font_size = 11.5
    line_height = 15

    ideas_list = re.split(r"(?=\n?–ò–¥–µ—è \d+:)", ideas.strip())
    for idx, idea in enumerate(ideas_list):
        if idx > 0:
            y -= 40  # –±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∏–¥–µ—è–º–∏

        lines = idea.strip().split("\n")
        for line in lines:
            line = line.strip()
            if not line:
                continue

            if re.match(r"^–ò–¥–µ—è \d+:", line):
                c.setFont("CustomFont", heading_size)
                for part in wrap(line, width=int(max_width / (heading_size * 0.55))):
                    c.drawString(margin_x, y, part)
                    y -= line_height
                y -= 10
                continue

            if any(line.startswith(h + ":") for h in ["–ò–Ω—Ç—Ä–æ", "–ö—Ä–∞—Ç–∫–æ", "–ü–æ–¥—Ä–æ–±–Ω–æ", "–°—Ü–µ–Ω–∞—Ä–∏–π", "–ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è"]):
                header, _, rest = line.partition(":")
                c.setFont("CustomFont", subheading_size)
                c.drawString(margin_x, y, f"{header}:")
                y -= line_height

                c.setFont("CustomFont", font_size)
                if header in ["–°—Ü–µ–Ω–∞—Ä–∏–π", "–ü–æ—á–µ–º—É –∏–¥–µ—è —Ö–æ—Ä–æ—à–∞—è"]:
                    points = re.split(r"(?<=[.!?])\s+(?=\w)", rest.strip())
                    for point in points:
                        point = "‚Äì " + point.strip()
                        for part in wrap(point, width=int(max_width / (font_size * 0.55))):
                            if y < 60:
                                c.showPage()
                                c.setFont("CustomFont", font_size)
                                y = height - 50
                            c.drawString(margin_x + 10, y, part)
                            y -= line_height
                        y -= 4
                else:
                    for part in wrap(rest.strip(), width=int(max_width / (font_size * 0.55))):
                        if y < 60:
                            c.showPage()
                            y = height - 50
                        c.drawString(margin_x + 10, y, part)
                        y -= line_height
                    y -= 5

                y -= 10
                continue

            for part in wrap(line, width=int(max_width / (font_size * 0.55))):
                if y < 60:
                    c.showPage()
                    y = height - 50
                c.drawString(margin_x, y, part)
                y -= line_height
            y -= 5

    c.save()
    pdf_output.seek(0)
    return pdf_output

from collections import defaultdict

brief_context = {}
comments_context = defaultdict(list)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_active
    is_active = True
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –±—Ä–∏—Ñ (PDF/DOCX) —Å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏.")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_active
    is_active = False
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ /start.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_generating_ideas, is_active
    if not is_active or is_generating_ideas:
        return

    is_generating_ideas = True
    caption = update.message.caption or ""
    document = update.message.document
    file = await document.get_file()
    file_path = f"/tmp/{document.file_name}"
    await file.download_to_drive(file_path)

    if file_path.endswith(".pdf"):
        brief_text = extract_text_from_pdf(file_path)
    elif file_path.endswith(".docx"):
        brief_text = extract_text_from_docx(file_path)
    else:
        await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ DOCX.")
        is_generating_ideas = False
        return

    full_text = caption + "\n\n" + brief_text if caption else brief_text
    ideas = await generate_ideas_from_brief(full_text)
    brief_context[update.effective_chat.id] = ideas

    pdf_file = create_pdf(ideas)
    await update.message.reply_document(InputFile(pdf_file, filename="ideas.pdf"))

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept"),
         InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="comment")]
    ]
    await update.message.reply_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    is_generating_ideas = False

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "accept":
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
        return

    if query.data == "comment":
        keyboard = [
            [InlineKeyboardButton("üõ† –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–µ", callback_data="revise"),
             InlineKeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="rewrite")]
        ]
        await query.edit_message_text("–ö–∞–∫ –±—É–¥–µ–º –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data in ["revise", "rewrite"]:
        context.user_data["rewrite"] = query.data == "rewrite"
        await query.edit_message_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∏–¥–µ—è–º. –Ø –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é PDF –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ.")

async def collect_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if "rewrite" not in context.user_data:
        return await chat_mode(update, context)

    comments_context[chat_id].append(update.message.text)
    await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π PDF...")

    old_ideas = brief_context.get(chat_id, "")
    comments = comments_context[chat_id]
    rewrite_all = context.user_data.get("rewrite", False)

    new_ideas = await regenerate_ideas(old_ideas, comments, rewrite_all)
    brief_context[chat_id] = new_ideas
    comments_context[chat_id] = []
    context.user_data.pop("rewrite", None)

    pdf_file = create_pdf(new_ideas)
    await update.message.reply_document(InputFile(pdf_file, filename="ideas_updated.pdf"))
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–¥–µ–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ ‚ú®")

async def chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_active or is_generating_ideas:
        return

    user_msg = update.message.text
    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ–≤–æ—Ä–∏—à—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."},
            {"role": "user", "content": user_msg}
        ],
        temperature=0.7,
        max_tokens=800,
    )
    await update.message.reply_text(response.choices[0].message.content.strip())

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), collect_comment))
    app.run_polling()

if __name__ == "__main__":
    main()

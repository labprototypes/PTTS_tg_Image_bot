import logging
import os
import tempfile

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from docx import Document
import pdfplumber
from openai import OpenAI

# --- –õ–æ–≥–≥–µ—Ä ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- GPT ---
client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
CATEGORY_OPTIONS = [
    ("üé¨ –í–∏–¥–µ–æ—Ä–æ–ª–∏–∫", "video"),
    ("üì¢ 360-–∫–∞–º–ø–∞–Ω–∏—è", "campaign"),
    ("üë• –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–∏–¥–¥–∏–Ω–≥", "seeding"),
    ("üéâ –ò–≤–µ–Ω—Ç", "event"),
    ("‚ùì –î—Ä—É–≥–æ–µ", "other"),
]

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π ---
def build_prompt(text, category):
    return (
        f"–¢—ã –∫—Ä–µ–∞—Ç–∏–≤—â–∏–∫. –ü—Ä–∏–¥—É–º–∞–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –±—Ä–∏—Ñ—É. "
        f"–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π –∏–¥–µ–∏:\n\n"
        f"1) –ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"2) –í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å\n"
        f"3) –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"4) –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"5) –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–∏\n"
        f"   5.1) –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π\n"
        f"   5.2) –ï—Å–ª–∏ —ç—Ç–æ 360-–∫–∞–º–ø–∞–Ω–∏—è ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å–∫–ª–∞–¥–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
        f"   5.3) –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–∏–¥–¥–∏–Ω–≥ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ö–∞–Ω–∏–∫—É\n"
        f"   5.4) –ï—Å–ª–∏ —ç—Ç–æ –∏–≤–µ–Ω—Ç ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        f"–ë—Ä–∏—Ñ:\n{text}"
    )

# --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
def extract_text_from_docx(path):
    doc = Document(path)
    return "\n".join([p.text for p in doc.paragraphs if p.text.strip()])

def extract_text_from_pdf(path):
    text = ""
    with pdfplumber.open(path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""
    return text

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.document
    file_name = file.file_name.lower()

    with tempfile.NamedTemporaryFile(delete=False) as tf:
        new_file = await context.bot.get_file(file.file_id)
        await new_file.download_to_drive(custom_path=tf.name)

        if file_name.endswith(".docx"):
            text = extract_text_from_docx(tf.name)
        elif file_name.endswith(".pdf"):
            text = extract_text_from_pdf(tf.name)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .docx –∏–ª–∏ .pdf —Ñ–∞–π–ª.")
            return

    context.user_data["brief_text"] = text
    context.user_data["history"] = []

    logger.info("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    buttons = [
        [InlineKeyboardButton(text, callback_data=data)]
        for text, data in CATEGORY_OPTIONS
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    category = query.data
    brief = context.user_data.get("brief_text")

    if not brief:
        await query.edit_message_text("–ë—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    prompt = build_prompt(brief, category)
    context.user_data["history"] = [{"role": "user", "content": prompt}]

    await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏... ‚è≥")

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=context.user_data["history"]
        )
        content = response.choices[0].message.content
        context.user_data["history"].append({"role": "assistant", "content": content})

        await query.message.reply_text(content)
    except Exception as e:
        logger.error(f"GPT –æ—à–∏–±–∫–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π.")

# --- –î–∏–∞–ª–æ–≥ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "history" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±—Ä–∏—Ñ –≤ .docx –∏–ª–∏ .pdf —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    user_input = update.message.text
    context.user_data["history"].append({"role": "user", "content": user_input})

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=context.user_data["history"]
        )
        content = response.choices[0].message.content
        context.user_data["history"].append({"role": "assistant", "content": content})

        await update.message.reply_text(content)
    except Exception as e:
        logger.error(f"GPT –æ—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT.")

# --- –°—Ç–∞—Ä—Ç ---
if __name__ == "__main__":
    import asyncio

    async def run_bot():
        TOKEN = os.environ["BOT_TOKEN"]
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        app.add_handler(CallbackQueryHandler(handle_category_selection))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        await app.bot.delete_webhook(drop_pending_updates=True)
        await app.initialize()
        await app.start()
        await app.updater.start_polling()

    asyncio.run(run_bot())

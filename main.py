import logging
import os
import tempfile

from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from docx import Document
import pdfplumber
from openai import OpenAI

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# GPT –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
user_context = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º–∏ –∏–¥–µ—è–º–∏.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ .docx –∏–ª–∏ .pdf —Å –±—Ä–∏—Ñ–æ–º, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é —Å–∞–º üí°"
    )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.document
    file_name = file.file_name.lower()

    with tempfile.NamedTemporaryFile(delete=False) as tf:
        new_file = await context.bot.get_file(file.file_id)
        await new_file.download_to_drive(custom_path=tf.name)

        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        if file_name.endswith(".docx"):
            text = extract_text_from_docx(tf.name)
        elif file_name.endswith(".pdf"):
            text = extract_text_from_pdf(tf.name)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .docx –∏–ª–∏ .pdf —Ñ–∞–π–ª.")
            return

    logger.info("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_context[update.message.from_user.id] = {"brief": text}

    keyboard = [
        [
            InlineKeyboardButton("–í–∏–¥–µ–æ—Ä–æ–ª–∏–∫", callback_data="video"),
            InlineKeyboardButton("360-–∫–∞–º–ø–∞–Ω–∏—è", callback_data="360"),
        ],
        [
            InlineKeyboardButton("–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–∏–¥–¥–∏–Ω–≥", callback_data="seeding"),
            InlineKeyboardButton("–ò–≤–µ–Ω—Ç", callback_data="event"),
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–∏:", reply_markup=reply_markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in user_context or "brief" not in user_context[user_id]:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±—Ä–∏—Ñ.")
        return

    category = query.data
    user_context[user_id]["category"] = category

    await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")

    brief = user_context[user_id]["brief"]
    category = user_context[user_id]["category"]

    ideas = await generate_ideas(brief, category)

    await context.bot.send_message(chat_id=query.message.chat_id, text=ideas)

# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π
async def generate_ideas(text, category):
    prompt = (
        f"–¢—ã –∫—Ä–µ–∞—Ç–∏–≤—â–∏–∫. –ü—Ä–∏–¥—É–º–∞–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –±—Ä–∏—Ñ—É. "
        f"–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π –∏–¥–µ–∏:\n\n"
        f"1) –ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"2) –í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å\n"
        f"3) –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"4) –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
        f"5) –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–∏\n"
        f"   5.1) –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π\n"
        f"   5.2) –ï—Å–ª–∏ —ç—Ç–æ 360-–∫–∞–º–ø–∞–Ω–∏—è ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å–∫–ª–∞–¥–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
        f"   5.3) –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–∏–¥–¥–∏–Ω–≥ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ö–∞–Ω–∏–∫—É\n"
        f"   5.4) –ï—Å–ª–∏ —ç—Ç–æ –∏–≤–µ–Ω—Ç ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é\n\n"
        f"–¢–∏–ø –∏–¥–µ–∏: {category}\n"
        f"–ë—Ä–∏—Ñ:\n{text}"
    )

    try:
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π üòî"

# —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –¥–æ–∫—Ä—É—Ç–∫–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message.text

    if user_id not in user_context:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±—Ä–∏—Ñ –≤ –≤–∏–¥–µ .docx –∏–ª–∏ .pdf.")
        return

    messages = [
        {"role": "system", "content": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤—â–∏–∫. –ü–æ–º–æ–≥–∏ –¥–æ–∫—Ä—É—Ç–∏—Ç—å –∏–¥–µ—é."},
        {"role": "user", "content": message}
    ]

    try:
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=messages
        )
        answer = completion.choices[0].message.content.strip()
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å GPT.")

# –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ docx
def extract_text_from_docx(path):
    doc = Document(path)
    return "\n".join([p.text for p in doc.paragraphs if p.text.strip()])

# –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ pdf
def extract_text_from_pdf(path):
    text = ""
    with pdfplumber.open(path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""
    return text

# –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio

    async def run_bot():
        TOKEN = os.environ["BOT_TOKEN"]
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))  # ‚úÖ —Å—Ç–∞—Ä—Ç
        app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        app.add_handler(CallbackQueryHandler(handle_category_selection))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        await app.bot.delete_webhook(drop_pending_updates=True)
        await app.initialize()
        await app.start()
        await app.updater.start_polling()

    asyncio.run(run_bot())

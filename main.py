import os
import logging
from telegram import Update, Document
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from openai import OpenAI
from docx import Document as DocxDocument
import pdfplumber

# === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø OpenAI ===
client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# === –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê ===
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file: Document = update.message.document
    file_name = file.file_name

    if not file_name.lower().endswith(('.pdf', '.docx')):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .pdf.")
        return

    file_path = await file.get_file()
    file_data = await file_path.download_as_bytearray()

    try:
        if file_name.endswith(".pdf"):
            text = extract_text_from_pdf(file_data)
        else:
            text = extract_text_from_docx(file_data)

        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–∏—Ñ–∞... üí°")

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–¥–µ–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–∏—Ñ–∞."},
                {"role": "user", "content": text}
            ],
            temperature=0.8,
            max_tokens=1000
        )

        ideas = response.choices[0].message.content
        await update.message.reply_text(ideas)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ GPT: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

# === EXTRACT DOCX ===
def extract_text_from_docx(file_data: bytearray) -> str:
    from io import BytesIO
    doc = DocxDocument(BytesIO(file_data))
    return "\n".join([p.text for p in doc.paragraphs if p.text.strip() != ""])

# === EXTRACT PDF ===
def extract_text_from_pdf(file_data: bytearray) -> str:
    from io import BytesIO
    with pdfplumber.open(BytesIO(file_data)) as pdf:
        return "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])

# === START –ë–û–¢–ê ===
if __name__ == "__main__":
    TOKEN = os.environ["BOT_TOKEN"]

    app = ApplicationBuilder().token(TOKEN).build()

    doc_handler = MessageHandler(filters.Document.ALL, handle_document)
    app.add_handler(doc_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
